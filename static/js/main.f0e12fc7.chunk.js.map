{"version":3,"sources":["components/Nav.jsx","components/Player.jsx","components/SongDisplay.jsx","components/LibraryItem.jsx","components/Library.jsx","data.js","App.js","serviceWorker.js","index.js"],"names":["Nav","libraryStatus","setLibraryStatus","onClick","icon","faMusic","Player","songs","setSongs","currentSong","setCurrentSong","isPlaying","setIsPlaying","songInfo","setSongInfo","audioRef","activeLibraryHandler","nextPrev","newSongs","map","song","id","active","formatTime","time","Math","floor","slice","skipHandler","direction","a","currentIndex","findIndex","length","current","play","trackAnimation","transform","animationPercent","className","currentTime","style","background","color","type","onChange","e","target","value","min","max","duration","faAngleLeft","size","pause","faPause","faPlay","faAngleRight","SongDisplay","src","cover","alt","name","artist","LibraryItem","selectSongHandler","Library","chillHop","audio","uuidv4","App","useRef","useState","songEndHandler","timeUpdateHandler","onTimeUpdate","onLoadedMetadata","ref","onEnded","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f0e12fc7.chunk.js","sourcesContent":["import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faMusic } from \"@fortawesome/free-solid-svg-icons\";\n\nfunction Nav({ libraryStatus, setLibraryStatus }) {\n  return (\n    <nav>\n      <h1>Turntable</h1>\n      <button\n        onClick={() => {\n          setLibraryStatus(!libraryStatus);\n        }}\n      >\n        Library &nbsp;\n        <FontAwesomeIcon icon={faMusic} />\n      </button>\n    </nav>\n  );\n}\n\nexport default Nav;\n","import React, { useEffect } from \"react\";\n// import { playAudio } from \"../util\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faPlay,\n  faPause,\n  faAngleLeft,\n  faAngleRight,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nfunction Player({\n  songs,\n  setSongs,\n  currentSong,\n  setCurrentSong,\n  isPlaying,\n  setIsPlaying,\n  songInfo,\n  setSongInfo,\n  audioRef,\n}) {\n  //UseEffect\n  // useEffect(() => {\n\n  // }, [currentSong]);\n\n  //Handlers\n\n  const activeLibraryHandler = (nextPrev) => {\n    const newSongs = songs.map((song) => {\n      if (song.id === nextPrev.id) {\n        return {\n          ...song,\n          active: true,\n        };\n      } else {\n        return {\n          ...song,\n          active: false,\n        };\n      }\n    });\n\n    setSongs(newSongs);\n  };\n\n  const playSongHandler = () => {\n    if (isPlaying) {\n      audioRef.current.pause();\n      setIsPlaying(!isPlaying);\n    } else {\n      audioRef.current.play();\n      setIsPlaying(!isPlaying);\n    }\n  };\n\n  const formatTime = (time) => {\n    return (\n      Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2)\n    );\n  };\n\n  const dragHandler = (e) => {\n    // console.log(e.target.value);\n    audioRef.current.currentTime = e.target.value;\n    setSongInfo({ ...songInfo, currentTime: e.target.value });\n  };\n\n  const skipHandler = async (direction) => {\n    let currentIndex = songs.findIndex((song) => song.id === currentSong.id);\n\n    if (direction === \"right\") {\n      await setCurrentSong(songs[(currentIndex + 1) % songs.length]);\n      activeLibraryHandler(songs[(currentIndex + 1) % songs.length]);\n    }\n    if (direction === \"left\" && currentIndex > 0) {\n      await setCurrentSong(songs[(currentIndex - 1) % songs.length]);\n      activeLibraryHandler(songs[(currentIndex - 1) % songs.length]);\n    }\n    if (direction === \"left\" && currentIndex === 0) {\n      await setCurrentSong(songs[songs.length - 1]);\n      activeLibraryHandler(songs[songs.length - 1]);\n    }\n    if (isPlaying) {\n      audioRef.current.play();\n    }\n  };\n\n  //styles\n  const trackAnimation = {\n    transform: `translateX(${songInfo.animationPercent}%)`,\n  };\n\n  return (\n    <div className=\"player\">\n      <div className=\"time-control\">\n        <p>{formatTime(songInfo.currentTime)}</p>\n\n        <div\n          style={{\n            background: `linear-gradient(to right, ${currentSong.color[0]}, ${currentSong.color[1]})`,\n          }}\n          className=\"track\"\n        >\n          <input\n            type=\"range\"\n            onChange={dragHandler}\n            min={0}\n            max={songInfo.duration ? songInfo.duration : 0}\n            value={songInfo.currentTime}\n          />\n          <div style={trackAnimation} className=\"animate-track\"></div>\n        </div>\n\n        <p>{songInfo.duration ? formatTime(songInfo.duration) : \"0:00\"}</p>\n      </div>\n      <div className=\"play-control\">\n        <FontAwesomeIcon\n          onClick={() => {\n            skipHandler(\"left\");\n          }}\n          className=\"skip-left\"\n          icon={faAngleLeft}\n          size=\"2x\"\n        />\n        <FontAwesomeIcon\n          onClick={playSongHandler}\n          className=\"play\"\n          icon={isPlaying ? faPause : faPlay}\n          size=\"2x\"\n        />\n        <FontAwesomeIcon\n          onClick={() => {\n            skipHandler(\"right\");\n          }}\n          className=\"skip-right\"\n          icon={faAngleRight}\n          size=\"2x\"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default Player;\n","import React from \"react\";\n\nfunction SongDisplay({ currentSong }) {\n  return (\n    <div className=\"song-display\">\n      <img src={currentSong.cover} alt={currentSong.name} />\n      <h2>{currentSong.name}</h2>\n      <h3>{currentSong.artist}</h3>\n    </div>\n  );\n}\n\nexport default SongDisplay;\n","import React from \"react\";\n// import { playAudio } from \"../util\";\n\nfunction LibraryItem({\n  audioRef,\n  song,\n  songs,\n  setSongs,\n  currentSong,\n  setCurrentSong,\n  id,\n  isPlaying,\n}) {\n  const selectSongHandler = async () => {\n    // const selectedSong = songs.filter((state) => state.id === id);\n    await setCurrentSong(song);\n\n    const newSongs = songs.map((song) => {\n      if (song.id === id) {\n        return {\n          ...song,\n          active: true,\n        };\n      } else {\n        return {\n          ...song,\n          active: false,\n        };\n      }\n    });\n\n    setSongs(newSongs);\n\n    if (isPlaying) {\n      audioRef.current.play();\n    }\n  };\n\n  return (\n    <div\n      onClick={selectSongHandler}\n      className={`library-item ${song.active ? \"selected\" : \"\"}`}\n    >\n      <img src={song.cover} alt={song.name} />\n      <div className=\"song-info\">\n        <h3>{song.name}</h3>\n        <h4>{song.artist}</h4>\n      </div>\n    </div>\n  );\n}\n\nexport default LibraryItem;\n","import React from \"react\";\nimport LibraryItem from \"./LibraryItem\";\n\nfunction Library({\n  libraryStatus,\n  audioRef,\n  songs,\n  setSongs,\n  currentSong,\n  setCurrentSong,\n  isPlaying,\n}) {\n  return (\n    <div className={`library ${libraryStatus ? \"active-library\" : \"\"}`}>\n      <h2>Library</h2>\n      <div className=\"library-items\">\n        {songs.map((song) => (\n          <LibraryItem\n            audioRef={audioRef}\n            song={song}\n            songs={songs}\n            setSongs={setSongs}\n            currentSong={currentSong}\n            setCurrentSong={setCurrentSong}\n            isPlaying={isPlaying}\n            id={song.id}\n            key={song.id}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default Library;\n","import { v4 as uuidv4 } from \"uuid\";\nfunction chillHop() {\n  return [\n    {\n      name: \"Beaver Creek\",\n      cover:\n        \"https://chillhop.com/wp-content/uploads/2020/09/0255e8b8c74c90d4a27c594b3452b2daafae608d-1024x1024.jpg\",\n      artist: \"Aso, Middle School, Aviino\",\n      audio: \"https://mp3.chillhop.com/serve.php/?mp3=10075\",\n      color: [\"#205950\", \"#2ab3bf\"],\n      id: uuidv4(),\n      active: true,\n    },\n    {\n      name: \"Daylight\",\n      cover:\n        \"https://chillhop.com/wp-content/uploads/2020/07/ef95e219a44869318b7806e9f0f794a1f9c451e4-1024x1024.jpg\",\n      artist: \"Aiguille\",\n      audio: \"https://mp3.chillhop.com/serve.php/?mp3=9272\",\n      color: [\"#EF8EA9\", \"#ab417f\"],\n      id: uuidv4(),\n      active: false,\n    },\n    {\n      name: \"Keep Going\",\n      cover:\n        \"https://chillhop.com/wp-content/uploads/2020/07/ff35dede32321a8aa0953809812941bcf8a6bd35-1024x1024.jpg\",\n      artist: \"Swørn\",\n      audio: \"https://mp3.chillhop.com/serve.php/?mp3=9222\",\n      color: [\"#CD607D\", \"#c94043\"],\n      id: uuidv4(),\n      active: false,\n    },\n    {\n      name: \"Nightfall\",\n      cover:\n        \"https://chillhop.com/wp-content/uploads/2020/07/ef95e219a44869318b7806e9f0f794a1f9c451e4-1024x1024.jpg\",\n      artist: \"Aiguille\",\n      audio: \"https://mp3.chillhop.com/serve.php/?mp3=9148\",\n      color: [\"#EF8EA9\", \"#ab417f\"],\n      id: uuidv4(),\n      active: false,\n    },\n    {\n      name: \"Reflection\",\n      cover:\n        \"https://chillhop.com/wp-content/uploads/2020/07/ff35dede32321a8aa0953809812941bcf8a6bd35-1024x1024.jpg\",\n      artist: \"Swørn\",\n      audio: \"https://mp3.chillhop.com/serve.php/?mp3=9228\",\n      color: [\"#CD607D\", \"#c94043\"],\n      id: uuidv4(),\n      active: false,\n    },\n    {\n      name: \"Under the City Stars\",\n      cover:\n        \"https://chillhop.com/wp-content/uploads/2020/09/0255e8b8c74c90d4a27c594b3452b2daafae608d-1024x1024.jpg\",\n      artist: \"Aso, Middle School, Aviino\",\n      audio: \"https://mp3.chillhop.com/serve.php/?mp3=10074\",\n      color: [\"#205950\", \"#2ab3bf\"],\n      id: uuidv4(),\n      active: false,\n    },\n    // {\n    //   name: \"Fake Song 1\",\n    //   cover:\n    //     \"https://chillhop.com/wp-content/uploads/2020/09/0255e8b8c74c90d4a27c594b3452b2daafae608d-1024x1024.jpg\",\n    //   artist: \"Fake artist 1\",\n    //   audio: \"https://mp3.chillhop.com/serve.php/?mp3=10074\",\n    //   color: [\"#205950\", \"#2ab3bf\"],\n    //   id: uuidv4(),\n    //   active: false,\n    // },\n    //ADD MORE HERE\n  ];\n}\n\nexport default chillHop;\n","import \"./styles/App.scss\";\nimport { useState, useRef } from \"react\";\nimport Nav from \"./components/Nav\";\nimport Player from \"./components/Player\";\nimport SongDisplay from \"./components/SongDisplay\";\nimport Library from \"./components/Library\";\nimport chillHop from \"./data\";\n\nfunction App() {\n  //Ref\n  const audioRef = useRef(null);\n  //State\n  const [songs, setSongs] = useState(chillHop());\n  const [currentSong, setCurrentSong] = useState(songs[0]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [libraryStatus, setLibraryStatus] = useState(false);\n  //Lifted from Player\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0,\n    animationPercent: 0,\n  });\n\n  //functions\n  const songEndHandler = async () => {\n    // console.log(\"song over\");\n    let currentIndex = songs.findIndex((song) => song.id === currentSong.id);\n\n    await setCurrentSong(songs[(currentIndex + 1) % songs.length]);\n    if (isPlaying) {\n      audioRef.current.play();\n    }\n  };\n  //Lifted from Player\n  const timeUpdateHandler = (e) => {\n    const currentTime = e.target.currentTime;\n    const duration = e.target.duration;\n    const animationPercent = (currentTime / duration) * 100;\n\n    setSongInfo({\n      ...songInfo,\n      currentTime: currentTime,\n      duration: duration,\n      animationPercent: animationPercent,\n    });\n  };\n\n  //Render\n  return (\n    <div className={`app ${libraryStatus ? \"library-active\" : \"\"}`}>\n      <Nav libraryStatus={libraryStatus} setLibraryStatus={setLibraryStatus} />\n      <SongDisplay currentSong={currentSong} />\n      <Player\n        songs={songs}\n        setSongs={setSongs}\n        currentSong={currentSong}\n        setCurrentSong={setCurrentSong}\n        isPlaying={isPlaying}\n        setIsPlaying={setIsPlaying}\n        songInfo={songInfo}\n        setSongInfo={setSongInfo}\n        audioRef={audioRef}\n      />\n      <Library\n        libraryStatus={libraryStatus}\n        audioRef={audioRef}\n        songs={songs}\n        setSongs={setSongs}\n        currentSong={currentSong}\n        setCurrentSong={setCurrentSong}\n        isPlaying={isPlaying}\n      />\n      <audio\n        onTimeUpdate={timeUpdateHandler}\n        onLoadedMetadata={timeUpdateHandler}\n        ref={audioRef}\n        src={currentSong.audio}\n        onEnded={() => {\n          songEndHandler();\n        }}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}